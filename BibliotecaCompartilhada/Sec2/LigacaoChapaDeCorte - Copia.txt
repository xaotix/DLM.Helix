using NXOpen;
using NXOpen.Assemblies;
using NXOpen.Features;
using NXOpen.UF;
using System;
using System.Collections.Generic;
using System.IO;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Windows.Forms;
using w = System.Windows;

namespace BibliotecaCompartilhada.Sec
{
    public class LigacaoChapaDeCorte
    {
        public Infos.InfoChapaDeCorte info
        {
            get
            {
                Infos.InfoChapaDeCorte retorno = new Infos.InfoChapaDeCorte();
                retorno.centroEntreFuros = this.centroEntreFuros;
                retorno.diametroFuro = this.diametroFuro;
                retorno.espessuraDaChapa = this.espessuraDaChapa;
                retorno.folga = this.folga;
                retorno.furoBorda = this.furoBorda;
                retorno.ladoChapa = this.ladoChapa;
                retorno.nome = this.nome;
                retorno.numeroDeColunasPfs = this.numeroDeColunasPfs;
                retorno.numeroDeLinhasPfs = this.numeroDeLinhasPfs;
                retorno.orientacao = this.orientacao;
                retorno.origem = new Ponto3D();
                retorno.perfilApoio = this.Apoio.nomePerfil;
                retorno.perfilViga = this.viga.nomePerfil;
                return retorno;
            }
        }

        private string caminhoTemplate
        {
            get
            {
                //if(this.tipoApoio == Constantes.TipoPeca.Column) return @"\\nbvmsplm32\Biblioteca\TEMPLATES_MEDABIL\PROD\TEMPLATES_MA\Ligacoes\ShearPlate\ShearPlateVigaXPilar.prt";
                return @"\\nbvmsplm32\Biblioteca\TEMPLATES_MEDABIL\PROD\TEMPLATES_MA\Ligacoes\ShearPlate\ShearPlateVigaXViga.prt";
            }
        }

        public string CaminhoFinal
        {
            get
            {
                return this.gerenciador.pastaObra + this.nome + ".prt";
            }
        }

        Component componente { get; set; }
        private Gerenciador gerenciador { get; set; }

        Part part
        {
            get
            {
                if(this.componente == null) return null;
                return (Part)this.componente.Prototype;
            }
        }

        public string nome
        {
            get
            {
                return Constantes.nomesLigacoes.ChapaDeCorte + "_" + this.viga.nome + "_" + this.Apoio.nome;
            }
        }

        private string _nomeViga { get; set; }
        public string nomeViga
        {
            get
            {
                if(this.componente == null) return this._nomeViga;
                return Expressoes.LerValorExpressaoString("nomeViga", this.componente);
            }
            set
            {
                if(this.componente == null)
                {
                    this._nomeViga = value;
                    return;
                }
                Expressoes.AplicaValorExpressao("nomeViga", value, this.componente);
            }

        }
        public Beam viga
        {
            get
            {
                return this.gerenciador.findBeam(nomeViga);
            }
            set
            {
                nomeViga = value.nome;
            }
        }

        private string _nomeApoio { get; set; }
        public string nomeApoio
        {
            get
            {
                if(this.componente == null) return this._nomeApoio;
                return Expressoes.LerValorExpressaoString("nomeApoio", this.componente);
            }
            set
            {
                if(this.componente == null)
                {
                    this._nomeApoio = value;
                    return;
                }
                Expressoes.AplicaValorExpressao("nomeApoio", value, this.componente);
            }

        }
        public Beam Apoio
        {
            get
            {
                return this.gerenciador.findBeam(nomeApoio);
            }
            set
            {
                nomeApoio = value.nome;
            }
        }
        public Constantes.TipoPeca tipoApoio
        {
            get
            {
                if(this.Apoio == null) return Constantes.TipoPeca.Nulo;
                return this.Apoio.tipo;
            }
        }

        private Constantes.end _end { get; set; }
        public Constantes.end end
        {
            get
            {
                if(this.componente == null) return this._end;
                return Expressoes.LerValorExpressao("End", this.componente) == 1 ? Constantes.end.end1 : Constantes.end.end2;
            }
            set
            {
                if(this.componente == null)
                {
                    this._end = value;
                    return;
                }
                if(value == Constantes.end.end1)
                {
                    Expressoes.AplicaValorExpressao("End", 1, this.componente);
                }
                else
                {
                    Expressoes.AplicaValorExpressao("End", 2, this.componente);
                }
            }
        }

        public Ponto3D origem
        {
            get
            {
                double B = Trigonometria.projectedDistance(this.origemGlobal, Apoio.startPoint_S, Apoio.vetorX, true);
                double angulo = Apoio.vetorX.ignorarZ.angulo(viga.vetorZ.ignorarZ, BibliotecaCompartilhada.Constantes.eixo.nulo);
                double A = B / Math.Cos(Trigonometria.grausToRadiano(angulo));
                angulo = viga.vetorZ.angulo(viga.vetorZ.ignorarZ, BibliotecaCompartilhada.Constantes.eixo.nulo);
                B = A;
                A = B / Math.Cos(Trigonometria.grausToRadiano(angulo));
                if(this.end == Constantes.end.end1) return new Ponto3D(0, 0, A);
                return new Ponto3D(0, 0, this.viga.comprimentoTotal + A);
            }
        }

        public Ponto3D origemViga
        {
            get
            {
                if(this.end == Constantes.end.end1) return this.viga.startPoint_S;
                return this.viga.endPoint_S;
            }
        }

        public double diferencaEndPoint { get; set; } = 0;

        public Ponto3D origemGlobal
        {
            get
            {
                if(this.componente != null)
                {
                    Point3d posicao = new Point3d();
                    Matrix3x3 orientacao;
                    this.componente.GetPosition(out posicao, out orientacao);
                    if(posicao.X == 0)
                    {
                        return new Ponto3D(Trigonometria.moverPonto(this.viga.startPoint_S, this.viga.vetorZ, posicao.Z));
                    }
                    return new Ponto3D(posicao);
                }
                if(this.end == Constantes.end.end1) return this.viga.startPoint_S;
                if(this.end == Constantes.end.end2) return this.viga.endPoint_S;
                return new Ponto3D();
            }
        }

        public Matriz3D orientacao
        {
            get
            {
                if(this.end == Constantes.end.end1) return new Matriz3D() { Xx = 1, Yy = 1, Zz = 1 };
                return new Matriz3D() { Xx = -1, Yy = 1, Zz = -1 };
            }
        }

        public Vetor3D vetorZ
        {
            get
            {
                if(orientacao != null)
                {
                    return new Vetor3D(orientacao.Zx, orientacao.Zy, orientacao.Zz);
                }
                return new Vetor3D();
            }
        }

        public Vetor3D vetorZViga
        {
            get
            {
                if(this.end == Constantes.end.end1)
                {
                    return this.viga.vetorZ;
                }
                else
                {
                    return this.viga.vetorZNegativo;
                }
            }
        }

        public Vetor3D vetorZNegativoViga
        {
            get
            {
                if(this.end == Constantes.end.end1)
                {
                    return this.viga.vetorZNegativo;
                }
                else
                {
                    return this.viga.vetorZ;
                }
            }
        }

        public Vetor3D vetorXViga
        {
            get
            {
                if(this.end == Constantes.end.end1)
                {
                    return this.viga.vetorX;
                }
                else
                {
                    return this.viga.vetorXNegativo;
                }
            }
        }

        public double apoio_AfastamentoHorizontal
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_AfastamentoHorizontal", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_AfastamentoHorizontal", value, this.componente);
            }
        }

        public double apoio_AfastamentoVertical
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_AfastamentoVertical", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_AfastamentoVertical", value, this.componente);
            }
        }

        public double apoio_AlturaAlma
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_AlturaAlma", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_AlturaAlma", value, this.componente);
            }
        }

        public double apoio_Angulo
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_Angulo", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_Angulo", value, this.componente);
            }
        }

        public double apoio_EndDistX
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_EndDistX", this.componente);
            }
            set
            {
                if(this.tipoApoio == Constantes.TipoPeca.Beam) Expressoes.AplicaValorExpressao("Apoio_EndDistX", value, this.componente);
            }
        }

        public double apoio_EndDistY
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_EndDistY", this.componente);
            }
            set
            {
                if(this.tipoApoio == Constantes.TipoPeca.Beam) Expressoes.AplicaValorExpressao("Apoio_EndDistY", value, this.componente);
            }
        }

        public double apoio_EspessuraAlma
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_EspessuraAlma", this.componente, 2);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_EspessuraAlma", value, this.componente);
            }
        }

        public double apoio_EspessuraMesaInferior
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_EspessuraMesaInferior", this.componente, 2);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_EspessuraMesaInferior", value, this.componente);
            }
        }

        public double apoio_EspessuraMesaSuperior
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_EspessuraMesaSuperior", this.componente, 2);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_EspessuraMesaSuperior", value, this.componente);
            }
        }

        public double apoio_LarguraMesaInferior
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_LarguraMesaInferior", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_LarguraMesaInferior", value, this.componente);
            }
        }

        public double apoio_LarguraMesaSuperior
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_LarguraMesaSuperior", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Apoio_LarguraMesaSuperior", value, this.componente);
            }
        }

        public double apoio_MaiorLargura
        {
            get
            {
                return Expressoes.LerValorExpressao("Apoio_MaiorLargura", this.componente);
            }
        }

        public double recuoViga
        {
            get
            {
                return Expressoes.LerValorExpressao("RecuoViga", this.componente);
            }
        }

        public double afastamentoX
        {
            get
            {
                return Expressoes.LerValorExpressao("AfastamentoX", this.componente);
            }
        }

        public double afastamentoY
        {
            get
            {
                return Expressoes.LerValorExpressao("AfastamentoY", this.componente);
            }
        }

        public double afastamentoZ
        {
            get
            {
                return Expressoes.LerValorExpressao("AfastamentoZ", this.componente);
            }
            set
            {
                if(this.tipoApoio == Constantes.TipoPeca.Column) Expressoes.AplicaValorExpressao("AfastamentoZ", value, this.componente);
            }
        }

        public double ladoChapa
        {
            get
            {
                return Expressoes.LerValorExpressao("LadoChapa", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("LadoChapa", value, this.componente);
            }
        }

        public double centroEntreFuros
        {
            get
            {
                return Expressoes.LerValorExpressao("CentroEntreFuros", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("CentroEntreFuros", value, this.componente);
            }
        }

        public double comprimentoChapa
        {
            get
            {
                return Expressoes.LerValorExpressao("ComprimentoChapa", this.componente);
            }
        }

        public double diametroFuro
        {
            get
            {
                return Expressoes.LerValorExpressao("diametroFuro", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("diametroFuro", value, this.componente);
            }
        }

        public double espessuraDaChapa
        {
            get
            {
                return Expressoes.LerValorExpressao("EspessuraDaChapa", this.componente, 2);
            }
            set
            {
                Expressoes.AplicaValorExpressao("EspessuraDaChapa", value, this.componente);
            }
        }

        public double folga
        {
            get
            {
                return Expressoes.LerValorExpressao("Folga", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Folga", value, this.componente);
            }
        }

        public double furoBorda
        {
            get
            {
                return Expressoes.LerValorExpressao("FuroBorda", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("FuroBorda", value, this.componente);
            }
        }

        public double larguraChapa
        {
            get
            {
                return Expressoes.LerValorExpressao("LarguraChapa", this.componente);
            }
        }

        public double numeroDeColunasPfs
        {
            get
            {
                return Expressoes.LerValorExpressao("NumeroDeColunasPfs", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("NumeroDeColunasPfs", value, this.componente);
            }
        }

        public double numeroDeLinhasPfs
        {
            get
            {
                return Expressoes.LerValorExpressao("NumeroDeLinhasPfs", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("NumeroDeLinhasPfs", value, this.componente);
            }
        }

        public double topoVigaPrimeiroFuro
        {
            get
            {
                return Expressoes.LerValorExpressao("TopoVigaPrimeiroFuro", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("TopoVigaPrimeiroFuro", value, this.componente);
            }
        }

        public double viga_AfastamentoHorizontal
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_AfastamentoHorizontal", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_AfastamentoHorizontal", value, this.componente);
            }
        }

        public double viga_AfastamentoVertical
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_AfastamentoVertical", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_AfastamentoVertical", value, this.componente);
            }
        }

        public double viga_AlturaAlma
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_AlturaAlma", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_AlturaAlma", value, this.componente);
            }
        }

        public double viga_EspessuraAlma
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_EspessuraAlma", this.componente, 2);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_EspessuraAlma", value, this.componente);
            }
        }

        public double viga_EspessuraMesaInferior
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_EspessuraMesaInferior", this.componente, 2);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_EspessuraMesaInferior", value, this.componente);
            }
        }

        public double viga_EspessuraMesaSuperior
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_EspessuraMesaSuperior", this.componente, 2);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_EspessuraMesaSuperior", value, this.componente);
            }
        }

        public double viga_LarguraMesaInferior
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_LarguraMesaInferior", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_LarguraMesaInferior", value, this.componente);
            }
        }

        public double viga_LarguraMesaSuperior
        {
            get
            {
                return Expressoes.LerValorExpressao("Viga_LarguraMesaSuperior", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("Viga_LarguraMesaSuperior", value, this.componente);
            }
        }

        public double RecuoEndViga
        {
            get
            {
                if(this.end == Constantes.end.end1) return viga.recuoEnd1;
                return viga.recuoEnd2;
            }
            set
            {
                if(this.end == Constantes.end.end1)
                {
                    this.viga.recuoEnd1 = value;
                    UFSession.GetUFSession().Modl.Update();
                    return;
                }
                this.viga.recuoEnd2 = value;
                UFSession.GetUFSession().Modl.Update();
            }
        }

        public double recorteA1
        {
            get
            {
                if(this.end == Constantes.end.end1)
                {
                    return Expressoes.LerValorExpressao("compRecorte1", this.componente);
                }
                else
                {
                    return Expressoes.LerValorExpressao("compRecorte2", this.componente);
                }
            }
        }

        public double recorteA2
        {
            get
            {
                if(this.end == Constantes.end.end1)
                {
                    return Expressoes.LerValorExpressao("compRecorte2", this.componente);
                }
                else
                {
                    return Expressoes.LerValorExpressao("compRecorte1", this.componente);
                }
            }
        }

        public bool alma
        {
            get
            {
                if(this.Apoio.tipo == Constantes.TipoPeca.Column)
                {
                    if(viga.vetorZ.paralelo(this.Apoio.vetorX)) return true;
                }
                return false;
            }
        }

        public bool mesaSuperior
        {
            get
            {
                if(this.Apoio.tipo == Constantes.TipoPeca.Column)
                {
                    if(this.end == Constantes.end.end2)
                    {
                        if(this.viga.vetorZNegativo.Equals(this.Apoio.vetorY)) return true;
                    }
                    else if(this.end == Constantes.end.end1)
                    {
                        if(this.viga.vetorZ.Equals(this.Apoio.vetorY)) return true;
                    }
                }
                return false;
            }
        }

        public bool mesaInferior
        {
            get
            {
                if(this.Apoio.tipo == Constantes.TipoPeca.Column)
                {
                    if(this.end == Constantes.end.end2)
                    {
                        if(this.viga.vetorZ.Equals(this.Apoio.vetorY)) return true;
                    }
                    else if(this.end == Constantes.end.end1)
                    {
                        if(this.viga.vetorZNegativo.Equals(this.Apoio.vetorY)) return true;
                    }
                }
                return false;
            }
        }

        public bool apoiosOk
        {
            get
            {
                if(this.viga == null) return false;
                if(this.Apoio == null) return false;
                return true;
            }
        }

        public Constantes.quadrante quadrante
        {
            get
            {
                if(this.tipoApoio == Constantes.TipoPeca.Beam) return Constantes.quadrante.nulo;
                if(this.Apoio == null) return Constantes.quadrante.nulo;
                return Trigonometria.retornarQuadrante(this.Apoio.vetorX, this.Apoio.vetorY, this.vetorZViga);
            }
        }

        Ponto3D p1AChapa
        {
            get
            {
                Ponto3D p1 = new Ponto3D(Expressoes.LerValorExpressaoPoint("p1AChapa", this.componente));
                double distX = p1.X;
                double distZ = p1.Z;
                p1 = Trigonometria.moverPonto(this.origemGlobal, this.vetorXViga, distX);
                p1 = Trigonometria.moverPonto(p1, this.vetorZViga, distZ);
                return p1;
            }
        }

        Ponto3D p1BChapa
        {
            get
            {
                Ponto3D p1 = new Ponto3D(Expressoes.LerValorExpressaoPoint("p1BChapa", this.componente));
                double distX = p1.X;
                double distZ = p1.Z;
                p1 = Trigonometria.moverPonto(this.origemGlobal, this.vetorXViga, distX);
                p1 = Trigonometria.moverPonto(p1, this.vetorZViga, distZ);
                return p1;
            }
        }

        Ponto3D p2AChapa
        {
            get
            {
                Ponto3D p1 = new Ponto3D(Expressoes.LerValorExpressaoPoint("p2AChapa", this.componente));
                double distX = p1.X;
                double distZ = p1.Z;
                p1 = Trigonometria.moverPonto(this.origemGlobal, this.vetorXViga, distX);
                p1 = Trigonometria.moverPonto(p1, this.vetorZViga, distZ);
                return p1;
            }
        }

        Ponto3D p2BChapa
        {
            get
            {
                Ponto3D p1 = new Ponto3D(Expressoes.LerValorExpressaoPoint("p2BChapa", this.componente));
                double distX = p1.X;
                double distZ = p1.Z;
                p1 = Trigonometria.moverPonto(this.origemGlobal, this.vetorXViga, distX);
                p1 = Trigonometria.moverPonto(p1, this.vetorZViga, distZ);
                return p1;
            }
        }

        public bool inclinadaSuperior
        {
            get
            {
                if(this.anguloViga == 0) return false;
                if(this.end == Constantes.end.end1)
                {
                    if(this.viga.vetorZ.Z > this.Apoio.vetorX.Z) return true;
                    return false;
                }
                if(this.end == Constantes.end.end2)
                {
                    if(this.viga.vetorZNegativo.Z > this.Apoio.vetorX.Z) return true;
                    return false;
                }

                return false;
            }
        }

        public double anguloViga
        {
            get
            {
                return Expressoes.LerValorExpressao("AnguloViga", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("AnguloViga", value, this.componente);
            }
        }

        public double angulo
        {
            get
            {
                double angulo = this.vetorZViga.angulo(this.Apoio.vetorY, Constantes.eixo.Z);
                if(angulo < 0) angulo = 360 + angulo;
                return angulo;
            }
        }

        private double xPos { get; set; }
        private double xNeg { get; set; }
        private double distZChapa { get; set; }

        private double extensaoChapa
        {
            get
            {
                return Expressoes.LerValorExpressao("extensaoChapa", this.componente);
            }
            set
            {
                Expressoes.AplicaValorExpressao("extensaoChapa", value, this.componente);
            }
        }

        public void interseccao()
        {
            

            double angVerificado = this.angulo;
            Vetor3D vec1 = new Vetor3D(this.origemGlobal, this.Apoio.startPoint_SxPos);
            Vetor3D vec2 = new Vetor3D(this.origemGlobal, this.Apoio.startPoint_IxPos);
            Vetor3D vec3 = new Vetor3D(this.origemGlobal, this.Apoio.startPoint_IxNeg);
            Vetor3D vec4 = new Vetor3D(this.origemGlobal, this.Apoio.startPoint_SxNeg);

            double ang1 = this.Apoio.vetorY.angulo(vec1, Constantes.eixo.Z);
            double ang2 = this.Apoio.vetorY.angulo(vec2, Constantes.eixo.Z);
            double ang3 = this.Apoio.vetorY.angulo(vec3, Constantes.eixo.Z);
            double ang4 = this.Apoio.vetorY.angulo(vec4, Constantes.eixo.Z);

            if(ang1 < 0) ang1 = 360 + ang1;
            if(ang2 < 0) ang2 = 360 + ang2;
            if(ang3 < 0) ang3 = 360 + ang3;
            if(ang4 < 0) ang4 = 360 + ang4;

            if(angVerificado > ang4 || angVerificado < ang1)
            {
                // Setor 1

                w.Point insersecXPos = Trigonometria.interseccao(this.Apoio.startPoint_SxPos.toPointXY, this.Apoio.startPoint_SxNeg.toPointXY, this.viga.startPoint_SxPos.toPointXY, this.viga.endPoint_SxPos.toPointXY);
                w.Point insersecXNeg = Trigonometria.interseccao(this.Apoio.startPoint_SxPos.toPointXY, this.Apoio.startPoint_SxNeg.toPointXY, this.viga.startPoint_SxNeg.toPointXY, this.viga.endPoint_SxNeg.toPointXY);
                Ponto3D p1xPos = new Ponto3D(insersecXPos.X, insersecXPos.Y, 0);
                Ponto3D p1xNeg = new Ponto3D(insersecXNeg.X, insersecXNeg.Y, 0);
                xPos = Trigonometria.projectedDistance(this.origemGlobal, p1xPos, this.vetorZViga.ignorarZ) + this.folga;
                xNeg = Trigonometria.projectedDistance(this.origemGlobal, p1xNeg, this.vetorZViga.ignorarZ) + this.folga;
                distZChapa = Expressoes.LerValorExpressao("DistZ", this.componente);
            }
            if(angVerificado > ang1 && angVerificado < ang2)
            {
                // Setor 2

                w.Point insersecXPos = Trigonometria.interseccao(this.Apoio.startPoint_SxPos.toPointXY, this.Apoio.startPoint_IxPos.toPointXY, this.viga.startPoint_SxPos.toPointXY, this.viga.endPoint_SxPos.toPointXY);
                w.Point insersecXNeg = Trigonometria.interseccao(this.Apoio.startPoint_SxPos.toPointXY, this.Apoio.startPoint_IxPos.toPointXY, this.viga.startPoint_SxNeg.toPointXY, this.viga.endPoint_SxNeg.toPointXY);
                Ponto3D p1xPos = new Ponto3D(insersecXPos.X, insersecXPos.Y, 0);
                Ponto3D p1xNeg = new Ponto3D(insersecXNeg.X, insersecXNeg.Y, 0);
                xNeg = Trigonometria.projectedDistance(this.origemGlobal, p1xPos, this.vetorZViga.ignorarZ) + this.folga;
                xPos = Trigonometria.projectedDistance(this.origemGlobal, p1xNeg, this.vetorZViga.ignorarZ) + this.folga;

                w.Point intersec1 = Trigonometria.interseccao(this.Apoio.startPoint_InternoSupXNeg.toPointXY, this.Apoio.startPoint_InternoInfXNeg.toPointXY, this.p1AChapa.toPointXY, this.p1BChapa.toPointXY);
                w.Point intersec2 = Trigonometria.interseccao(this.Apoio.startPoint_InternoSupXNeg.toPointXY, this.Apoio.startPoint_InternoInfXNeg.toPointXY, this.p2AChapa.toPointXY, this.p2BChapa.toPointXY);
                Ponto3D p1 = new Ponto3D(intersec1.X, intersec1.Y, 0);
                Ponto3D p2 = new Ponto3D(intersec2.X, intersec2.Y, 0);
                double dist1 = Trigonometria.projectedDistance(this.origemGlobal, p1, this.vetorZViga.ignorarZ);
                double dist2 = Trigonometria.projectedDistance(this.origemGlobal, p2, this.vetorZViga.ignorarZ);
                if(dist1 > dist2)
                {
                    distZChapa = dist1;
                }
                else
                {
                    distZChapa = dist2;
                }

                w.Point intersec3 = Trigonometria.interseccao(insersecXPos, insersecXNeg, this.p1AChapa.toPointXY, this.p1BChapa.toPointXY);
                w.Point intersec4 = Trigonometria.interseccao(insersecXPos, insersecXNeg, this.p2AChapa.toPointXY, this.p2BChapa.toPointXY);
                p1 = new Ponto3D(intersec3.X, intersec3.Y, 0);
                p2 = new Ponto3D(intersec4.X, intersec4.Y, 0);
                dist1 = Trigonometria.projectedDistance(this.origemGlobal, p1, this.vetorZViga.ignorarZ);
                dist2 = Trigonometria.projectedDistance(this.origemGlobal, p2, this.vetorZViga.ignorarZ);

                if(dist1 > dist2)
                {
                    this.extensaoChapa = dist1 - distZChapa;
                }
                else
                {
                    this.extensaoChapa = dist2 - distZChapa;
                }
            }
            if(angVerificado > ang2 && angVerificado < ang3)
            {
                // Setor 3

                w.Point insersecXPos = Trigonometria.interseccao(this.Apoio.startPoint_IxPos.toPointXY, this.Apoio.startPoint_IxNeg.toPointXY, this.viga.startPoint_SxPos.toPointXY, this.viga.endPoint_SxPos.toPointXY);
                w.Point insersecXNeg = Trigonometria.interseccao(this.Apoio.startPoint_IxPos.toPointXY, this.Apoio.startPoint_IxNeg.toPointXY, this.viga.startPoint_SxNeg.toPointXY, this.viga.endPoint_SxNeg.toPointXY);
                Ponto3D p1xPos = new Ponto3D(insersecXPos.X, insersecXPos.Y, 0);
                Ponto3D p1xNeg = new Ponto3D(insersecXNeg.X, insersecXNeg.Y, 0);
                xPos = Trigonometria.projectedDistance(this.origemGlobal, p1xPos, this.vetorZViga.ignorarZ) + this.folga;
                xNeg = Trigonometria.projectedDistance(this.origemGlobal, p1xNeg, this.vetorZViga.ignorarZ) + this.folga;
                distZChapa = Expressoes.LerValorExpressao("DistZ", this.componente);
            }
            if(angVerificado > ang3 && angVerificado < ang4)
            {
                // Setor 4

                w.Point insersecXPos = Trigonometria.interseccao(this.Apoio.startPoint_SxNeg.toPointXY, this.Apoio.startPoint_IxNeg.toPointXY, this.viga.startPoint_SxPos.toPointXY, this.viga.endPoint_SxPos.toPointXY);
                w.Point insersecXNeg = Trigonometria.interseccao(this.Apoio.startPoint_SxNeg.toPointXY, this.Apoio.startPoint_IxNeg.toPointXY, this.viga.startPoint_SxNeg.toPointXY, this.viga.endPoint_SxNeg.toPointXY);
                Ponto3D p1xPos = new Ponto3D(insersecXPos.X, insersecXPos.Y, 0);
                Ponto3D p1xNeg = new Ponto3D(insersecXNeg.X, insersecXNeg.Y, 0);
                xNeg = Trigonometria.projectedDistance(this.origemGlobal, p1xPos, this.vetorZViga.ignorarZ) + this.folga;
                xPos = Trigonometria.projectedDistance(this.origemGlobal, p1xNeg, this.vetorZViga.ignorarZ) + this.folga;

                w.Point intersec1 = Trigonometria.interseccao(this.Apoio.startPoint_InternoSupXPos.toPointXY, this.Apoio.startPoint_InternoInfXPos.toPointXY, this.p1AChapa.toPointXY, this.p1BChapa.toPointXY);
                w.Point intersec2 = Trigonometria.interseccao(this.Apoio.startPoint_InternoSupXPos.toPointXY, this.Apoio.startPoint_InternoInfXPos.toPointXY, this.p2AChapa.toPointXY, this.p2BChapa.toPointXY);
                Ponto3D p1 = new Ponto3D(intersec1.X, intersec1.Y, 0);
                Ponto3D p2 = new Ponto3D(intersec2.X, intersec2.Y, 0);
                double dist1 = Trigonometria.projectedDistance(this.origemGlobal, p1, this.vetorZViga.ignorarZ);
                double dist2 = Trigonometria.projectedDistance(this.origemGlobal, p2, this.vetorZViga.ignorarZ);
                if(dist1 > dist2)
                {
                    distZChapa = dist1;
                }
                else
                {
                    distZChapa = dist2;
                }

                w.Point intersec3 = Trigonometria.interseccao(insersecXPos, insersecXNeg, this.p1AChapa.toPointXY, this.p1BChapa.toPointXY);
                w.Point intersec4 = Trigonometria.interseccao(insersecXPos, insersecXNeg, this.p2AChapa.toPointXY, this.p2BChapa.toPointXY);
                p1 = new Ponto3D(intersec3.X, intersec3.Y, 0);
                p2 = new Ponto3D(intersec4.X, intersec4.Y, 0);
                dist1 = Trigonometria.projectedDistance(this.origemGlobal, p1, this.vetorZViga.ignorarZ);
                dist2 = Trigonometria.projectedDistance(this.origemGlobal, p2, this.vetorZViga.ignorarZ);

                if(dist1 > dist2)
                {
                    this.extensaoChapa = dist1 - distZChapa;
                }
                else
                {
                    this.extensaoChapa = dist2 - distZChapa;
                }
            }

        }

        public LigacaoChapaDeCorte(Gerenciador ger, Component componente)
        {
            Part tempPart = (Part)componente.Prototype;
            try { if(!tempPart.IsFullyLoaded) tempPart.LoadFully(); } catch { }
            this.gerenciador = ger;
            this.componente = componente;
        }

        public LigacaoChapaDeCorte(Beam viga, Beam apoio, Constantes.end end)
        {
            this.gerenciador = viga.getGerenciador();
            this.viga = viga;
            this.end = end;
            this.Apoio = apoio;
            if(!this.apoiosOk) return;
            this.lado = getLado();
            if(this.lado == Constantes.ladoPeca.Nulo)
            {
                MessageBox.Show("Impossível inserir a ligação.");
                return;
            }
            criarTemplate();
            this.end = end;
            this.viga = viga;
            this.Apoio = apoio;
            atualizarValoresExpressao();
        }

        public LigacaoChapaDeCorte(Beam viga, Beam apoio, Constantes.end end, Infos.InfoChapaDeCorte info)
        {
            this.gerenciador = viga.getGerenciador();
            this.viga = viga;
            this.end = end;
            this.Apoio = apoio;
            if(!this.apoiosOk) return;
            this.lado = getLado();
            if(this.lado == Constantes.ladoPeca.Nulo)
            {
                MessageBox.Show("Impossível inserir a ligação.");
                return;
            }
            criarTemplate();
            this.end = end;
            this.viga = viga;
            this.Apoio = apoio;
            this.centroEntreFuros = info.centroEntreFuros;
            this.diametroFuro = info.diametroFuro;
            this.espessuraDaChapa = info.espessuraDaChapa;
            this.folga = info.folga;
            this.furoBorda = info.furoBorda;
            this.ladoChapa = info.ladoChapa;
            this.numeroDeColunasPfs = info.numeroDeColunasPfs;
            this.numeroDeLinhasPfs = info.numeroDeLinhasPfs;
            this.topoVigaPrimeiroFuro = info.topoVigaPrimeiroFuro;
            atualizarValoresExpressao();
        }

        public LigacaoChapaDeCorte() { }

        public void Atualizar(Infos.InfoChapaDeCorte info)
        {
            this.centroEntreFuros = info.centroEntreFuros;
            this.diametroFuro = info.diametroFuro;
            this.espessuraDaChapa = info.espessuraDaChapa;
            this.folga = info.folga;
            this.furoBorda = info.furoBorda;
            this.ladoChapa = info.ladoChapa;
            this.numeroDeColunasPfs = info.numeroDeColunasPfs;
            this.numeroDeLinhasPfs = info.numeroDeLinhasPfs;
            this.topoVigaPrimeiroFuro = info.topoVigaPrimeiroFuro;
            atualizarValoresExpressao();
        }

        public void Deletar()
        {
            if(this.tipoApoio == Constantes.TipoPeca.Beam)
            {
                #region Viga
                if(this.end == Constantes.end.end1)
                {
                    this.viga.recorteSuperiorEnd1On = Constantes.OnOf.Off;
                    this.viga.recorteInferiorEnd1On = Constantes.OnOf.Off;
                    this.viga.recuoEnd1 = 0;
                }
                if(this.end == Constantes.end.end2)
                {
                    this.viga.recorteSuperiorEnd2On = Constantes.OnOf.Off;
                    this.viga.recorteInferiorEnd2On = Constantes.OnOf.Off;
                    this.viga.recuoEnd2 = 0;
                }
                #endregion
            }
            else if(this.tipoApoio == Constantes.TipoPeca.Column)
            {
                #region Coluna
                if(this.end == Constantes.end.end1)
                {
                    this.viga.recorteSuperiorEnd1On = Constantes.OnOf.Off;
                    this.viga.recorteInferiorEnd1On = Constantes.OnOf.Off;
                    this.viga.recuoEnd1 = 0;
                }
                if(this.end == Constantes.end.end2)
                {
                    this.viga.recorteSuperiorEnd2On = Constantes.OnOf.Off;
                    this.viga.recorteInferiorEnd2On = Constantes.OnOf.Off;
                    this.viga.recuoEnd2 = 0;
                }
                this.afastamentoZ = distZChapa;
                #endregion
            }
            UFSession.GetUFSession().Modl.Update();
            this.viga.furacao.removerFuro(this.nome);
            Modelo.deletarComponente(this.componente);
            UFSession.GetUFSession().Modl.Update();
        }

        public void criarTemplate()
        {
            if(File.Exists(this.CaminhoFinal)) File.Delete(this.CaminhoFinal);
            try
            {
                File.Copy(this.caminhoTemplate, this.CaminhoFinal);
            }
            catch(Exception ex)
            {
                MessageBox.Show(ex.Message);
            }

            this.componente = this.viga.adicionarFilho(this.CaminhoFinal, this.nome, this.origem, this.orientacao);
        }

        Snap.Geom.Surface.Plane planeMesaSup { get; set; }
        Snap.Geom.Surface.Plane planeMesaInf { get; set; }
        Snap.Geom.Surface.Plane planeAlmaPost { get; set; }
        Snap.Geom.Surface.Plane planeAlmaAnt { get; set; }

        private Constantes.ladoPeca getLado()
        {
            try
            {
                Snap.Geom.Curve.Ray ray = new Snap.Geom.Curve.Ray(new Snap.Position(this.viga.startPoint_S.ToPoint3d), new Snap.Vector(this.viga.vetorZNegativo.ToVector3d));
                this.planeMesaSup = new Snap.Geom.Surface.Plane(new Snap.Position(this.Apoio.startPoint_S.ToPoint3d), new Snap.Vector(this.Apoio.vetorY.ToPoint3d));
                this.planeMesaInf = new Snap.Geom.Surface.Plane(new Snap.Position(this.Apoio.startPoint_I.ToPoint3d), new Snap.Vector(this.Apoio.vetorY.ToPoint3d));
                this.planeAlmaPost = new Snap.Geom.Surface.Plane(new Snap.Position(this.Apoio.perfil.P_Caixao == 0 ? Trigonometria.moverPonto(this.Apoio.startPoint_C, this.Apoio.vetorX, this.Apoio.perfil.espessura_Alma / 2).ToPoint3d : Trigonometria.moverPonto(this.Apoio.startPoint_C, this.Apoio.vetorX, this.Apoio.perfil.P_Caixao_Dist / 2).ToPoint3d), new Snap.Vector(this.Apoio.vetorX.ToPoint3d));
                this.planeAlmaAnt = new Snap.Geom.Surface.Plane(new Snap.Position(this.Apoio.perfil.P_Caixao == 0 ? Trigonometria.moverPonto(this.Apoio.startPoint_C, this.Apoio.vetorXNegativo, this.Apoio.perfil.espessura_Alma / 2).ToPoint3d : Trigonometria.moverPonto(this.Apoio.startPoint_C, this.Apoio.vetorXNegativo, this.Apoio.perfil.P_Caixao_Dist / 2).ToPoint3d), new Snap.Vector(this.Apoio.vetorXNegativo.ToPoint3d));

                Snap.Position? posMesaSup = null;
                Snap.Position? posMesaInf = null;
                Snap.Position? posAlmaPos = null;
                Snap.Position? posAlmaAnt = null;

                try { posMesaSup = Snap.Compute.Intersect(ray, planeMesaSup); } catch { }
                try { posMesaInf = Snap.Compute.Intersect(ray, planeMesaInf); } catch { }
                try { posAlmaPos = Snap.Compute.Intersect(ray, planeAlmaPost); } catch { }
                try { posAlmaAnt = Snap.Compute.Intersect(ray, planeAlmaAnt); } catch { }

                Ponto3D ptDistMesaSup = null;
                Ponto3D ptDistMesaInf = null;
                Ponto3D ptDistAlmaPos = null;
                Ponto3D ptDistAlmaAnt = null;

                if(posMesaSup != null) ptDistMesaSup = new Ponto3D(posMesaSup.Value.X, posMesaSup.Value.Y, posMesaSup.Value.Z);
                if(posMesaInf != null) ptDistMesaInf = new Ponto3D(posMesaInf.Value.X, posMesaInf.Value.Y, posMesaInf.Value.Z);
                if(posAlmaPos != null) ptDistAlmaPos = new Ponto3D(posAlmaPos.Value.X, posAlmaPos.Value.Y, posAlmaPos.Value.Z);
                if(posAlmaAnt != null) ptDistAlmaAnt = new Ponto3D(posAlmaAnt.Value.X, posAlmaAnt.Value.Y, posAlmaAnt.Value.Z);

                double distMesaSup = 0;
                double distMesaInf = 0;
                double distAlmaPos = 0;
                double distAlmaAnt = 0;

                if(posMesaSup != null) distMesaSup = Trigonometria.projectedDistance(this.origemViga, ptDistMesaSup, this.vetorZViga, true);
                if(posMesaInf != null) distMesaInf = Trigonometria.projectedDistance(this.origemViga, ptDistMesaInf, this.vetorZViga, true);
                if(posAlmaPos != null) distAlmaPos = Trigonometria.projectedDistance(this.origemViga, ptDistAlmaPos, this.vetorZViga, true);
                if(posAlmaAnt != null) distAlmaAnt = Trigonometria.projectedDistance(this.origemViga, ptDistAlmaAnt, this.vetorZViga, true);

                double xMaxSup = this.Apoio.perfil.mesa_Superior_Largura / 2;
                double xMaxInf = this.Apoio.perfil.mesa_Inferior_Largura / 2;
                double yMax = this.Apoio.perfil.altura / 2;

                Dictionary<Constantes.ladoPeca, double> dic = new Dictionary<Constantes.ladoPeca, double>();
                dic.Add(Constantes.ladoPeca.MesaInferior, distMesaInf);
                dic.Add(Constantes.ladoPeca.MesaSuperior, distMesaSup);
                dic.Add(Constantes.ladoPeca.AlmaLadoAnterior, distAlmaAnt);
                dic.Add(Constantes.ladoPeca.AlmaLadoPosterior, distAlmaPos);

                List<double> lista = new List<double>();
                 if(posMesaSup != null) if(Trigonometria.projectedDistance(this.Apoio.startPoint_C, ptDistMesaSup, this.Apoio.vetorX) < xMaxSup) lista.Add(distMesaSup);
                 if(posMesaInf != null) if(Trigonometria.projectedDistance(this.Apoio.startPoint_C, ptDistMesaInf, this.Apoio.vetorX) < xMaxInf) lista.Add(distMesaInf);
                 if(posAlmaAnt != null) if(Trigonometria.projectedDistance(this.Apoio.startPoint_C, ptDistAlmaAnt, this.Apoio.vetorY) < yMax) lista.Add(distAlmaAnt);
                 if(posAlmaPos != null) if(Trigonometria.projectedDistance(this.Apoio.startPoint_C, ptDistAlmaPos, this.Apoio.vetorY) < yMax) lista.Add(distAlmaPos);

                double escolhido = lista.Max();

                return dic.First(x => x.Value == escolhido).Key;
            }
            catch
            {
                return Constantes.ladoPeca.Nulo;
            }
        }

        public Constantes.ladoPeca lado { get; set; }

        public void atualizarValoresExpressao()
        {
            this.lado = getLado();
            if(this.lado == Constantes.ladoPeca.Nulo)
            {
                MessageBox.Show("Impossível inserir a ligação.");
                return;
            }
            this.RecuoEndViga = 0;
            this.viga_LarguraMesaInferior = this.viga.perfil.mesa_Inferior_Largura;
            this.viga_LarguraMesaSuperior = this.viga.perfil.mesa_Superior_Largura;
            this.viga_EspessuraMesaInferior = this.viga.perfil.mesa_Inferior_Espessura;
            this.viga_EspessuraMesaSuperior = this.viga.perfil.mesa_Superior_Espessura;
            this.viga_AlturaAlma = this.viga.perfil.altura;
            this.viga_EspessuraAlma = this.viga.perfil.espessura_Alma;
            this.viga_AfastamentoHorizontal = this.viga.offsetHorizontal;
            this.viga_AfastamentoVertical = this.viga.offsetVertical;
            this.apoio_LarguraMesaSuperior = this.Apoio.perfil.mesa_Superior_Largura;

            Snap.Geom.Curve.Ray ray = new Snap.Geom.Curve.Ray(new Snap.Position(this.viga.startPoint_S.ToPoint3d), new Snap.Vector(this.viga.vetorZ.ToVector3d));
            Snap.Geom.Surface.Plane plane = new Snap.Geom.Surface.Plane(new Snap.Position(this.Apoio.startPoint_S.ToPoint3d), new Snap.Vector(this.Apoio.vetorX.ToPoint3d));
            Snap.Position? pos = Snap.Compute.Intersect(ray, plane);

            Snap.Geom.Curve.Ray xPos = new Snap.Geom.Curve.Ray(new Snap.Position(this.viga.startPoint_InternoSupXPos.ToPoint3d), new Snap.Vector(this.viga.vetorZ.ToVector3d));
            Snap.Geom.Curve.Ray xNeg = new Snap.Geom.Curve.Ray(new Snap.Position(this.viga.startPoint_InternoSupXNeg.ToPoint3d), new Snap.Vector(this.viga.vetorZ.ToVector3d));


            if(this.end == Constantes.end.end1) diferencaEndPoint = Trigonometria.projectedDistance(this.viga.startPoint_S, new Ponto3D(pos.Value.X, pos.Value.Y, pos.Value.Z), this.vetorZViga, true);
            if(this.end == Constantes.end.end2) diferencaEndPoint = Trigonometria.projectedDistance(this.viga.endPoint_S, new Ponto3D(pos.Value.X, pos.Value.Y, pos.Value.Z), this.vetorZViga, true);
            this.RecuoEndViga = diferencaEndPoint;

            #region Angulo
            if(this.Apoio.tipo == Constantes.TipoPeca.Beam)
            {
                this.anguloViga = this.viga.vetorY.angulo(this.Apoio.vetorY, Constantes.eixo.nulo);
                if(this.inclinadaSuperior) this.anguloViga *= -1;
            }
            else if(this.Apoio.tipo == Constantes.TipoPeca.Column)
            {
                this.anguloViga = this.viga.vetorY.angulo(this.Apoio.vetorZNegativo, Constantes.eixo.nulo);
                if(!this.inclinadaSuperior) this.anguloViga *= -1;
            }
            #endregion

            double recA1 = 0, recA2 = 0;
          
            //if(this.tipoApoio == Constantes.TipoPeca.Beam)
            //{
                #region Viga
                if(this.lado == Constantes.ladoPeca.AlmaLadoAnterior)
                {
                    //this.apoio_EndDistX = Trigonometria.projectedDistance(this.origemGlobal, this.Apoio.startPoint_S, this.viga.vetorX);
                    //this.apoio_EndDistY = Trigonometria.projectedDistance(this.origemGlobal, this.Apoio.startPoint_S, this.vetorZViga, true);
                }
                if(this.lado == Constantes.ladoPeca.AlmaLadoPosterior)
                {
                    //this.apoio_EndDistX = Trigonometria.projectedDistance(this.origemGlobal, this.Apoio.endPoint_S, this.viga.vetorX);
                    //this.apoio_EndDistY = Trigonometria.projectedDistance(this.origemGlobal, this.Apoio.endPoint_S, this.vetorZViga, true);
                }

                UFSession.GetUFSession().Modl.Update();
                if(this.end == Constantes.end.end1)
                {
                    this.viga.recorteSuperiorEnd1ComprimentoA1 = this.recorteA1;
                    this.viga.recorteSuperiorEnd1ComprimentoA2 = this.recorteA2;
                    this.viga.recorteSuperiorEnd1Altura = this.viga.perfil.mesa_Superior_Espessura + folga;
                    this.viga.recorteSuperiorEnd1On = Constantes.OnOf.On;
                    double dif = Math.Abs(this.recorteA1 - this.recorteA2);
                    if(this.viga.perfil.altura < this.Apoio.perfil.altura)
                    {
                        if(dif != 0)
                        {
                            this.viga.recorteInferiorEnd1ComprimentoA1 = this.recorteA1 > this.recorteA2 ? dif : 0;
                            this.viga.recorteInferiorEnd1ComprimentoA2 = this.recorteA1 < this.recorteA2 ? dif : 0;
                            this.viga.recorteInferiorEnd1Altura = this.viga.perfil.mesa_Superior_Espessura + folga;
                            this.viga.recorteInferiorEnd1On = Constantes.OnOf.On;
                        }
                    }
                    else if(this.viga.perfil.altura == this.Apoio.perfil.altura)
                    {
                        this.viga.recorteInferiorEnd1ComprimentoA1 = this.recorteA1;
                        this.viga.recorteInferiorEnd1ComprimentoA2 = this.recorteA2;
                        this.viga.recorteInferiorEnd1Altura = this.viga.perfil.mesa_Superior_Espessura + folga;
                        this.viga.recorteInferiorEnd1On = Constantes.OnOf.On;
                    }
                    else if(this.viga.perfil.altura > this.Apoio.perfil.altura)
                    {
                        this.viga.recorteInferiorEnd1ComprimentoA1 = this.recorteA1;
                        this.viga.recorteInferiorEnd1ComprimentoA2 = this.recorteA2;
                        this.viga.recorteInferiorEnd1Altura = this.viga.perfil.mesa_Superior_Espessura + folga + this.viga.perfil.altura - this.Apoio.perfil.altura;
                        this.viga.recorteInferiorEnd1On = Constantes.OnOf.On;
                    }
                    this.viga.recuoEnd1 += this.folga + this.Apoio.perfil.espessura_Alma / 2;
                }
                if(this.end == Constantes.end.end2)
                {
                    this.viga.recorteSuperiorEnd2ComprimentoA1 = this.recorteA1;
                    this.viga.recorteSuperiorEnd2ComprimentoA2 = this.recorteA2;
                    this.viga.recorteSuperiorEnd2Altura = this.viga.perfil.mesa_Superior_Espessura + folga;
                    this.viga.recorteSuperiorEnd2On = Constantes.OnOf.On;
                    double dif = Math.Abs(this.recorteA1 - this.recorteA2);
                    if(this.viga.perfil.altura < this.Apoio.perfil.altura)
                    {
                        if(dif != 0)
                        {
                            this.viga.recorteInferiorEnd2ComprimentoA1 = this.recorteA1 > this.recorteA2 ? dif : 0;
                            this.viga.recorteInferiorEnd2ComprimentoA2 = this.recorteA1 < this.recorteA2 ? dif : 0;
                            this.viga.recorteInferiorEnd2Altura = this.viga.perfil.mesa_Superior_Espessura + folga;
                            this.viga.recorteInferiorEnd2On = Constantes.OnOf.On;
                        }
                    }
                    else if(this.viga.perfil.altura == this.Apoio.perfil.altura)
                    {
                        this.viga.recorteInferiorEnd2ComprimentoA1 = this.recorteA1;
                        this.viga.recorteInferiorEnd2ComprimentoA2 = this.recorteA2;
                        this.viga.recorteInferiorEnd2Altura = this.viga.perfil.mesa_Superior_Espessura + folga;
                        this.viga.recorteInferiorEnd2On = Constantes.OnOf.On;
                    }
                    else if(this.viga.perfil.altura > this.Apoio.perfil.altura)
                    {
                        this.viga.recorteInferiorEnd2ComprimentoA1 = this.recorteA1;
                        this.viga.recorteInferiorEnd2ComprimentoA2 = this.recorteA2;
                        this.viga.recorteInferiorEnd2Altura = this.viga.perfil.mesa_Superior_Espessura + folga + this.viga.perfil.altura - this.Apoio.perfil.altura;
                        this.viga.recorteInferiorEnd2On = Constantes.OnOf.On;
                    }
                    this.viga.recuoEnd2 += this.folga + this.Apoio.perfil.espessura_Alma / 2;
                }
                if(anguloViga != 0)
                {
                    double recorte = Math.Abs(this.viga.perfil.altura * Math.Tan(Trigonometria.grausToRadiano(this.anguloViga)));
                    if(this.end == Constantes.end.end1)
                    {
                        if(this.inclinadaSuperior) this.viga.recuoEnd1 -= recorte;
                        this.viga.recorteInclinadoEnd1 = Constantes.OnOf.On;
                        this.viga.RecorteTIncEnd1CompInf = this.inclinadaSuperior ? 0 : recorte;
                        this.viga.RecorteTIncEnd1CompSup = this.inclinadaSuperior ? recorte : 0;
                    }
                    else
                    {
                        if(this.inclinadaSuperior) this.viga.recuoEnd2 -= recorte;
                        this.viga.recorteInclinadoEnd2 = Constantes.OnOf.On;
                        this.viga.RecorteTIncEnd1CompInf = this.inclinadaSuperior ? 0 : recorte;
                        this.viga.RecorteTIncEnd1CompSup = this.inclinadaSuperior ? recorte : 0;
                    }
                }
                UFSession.GetUFSession().Modl.Update();
                this.viga.furacao.removerFuro(this.nome);
                this.viga.furacao.addFuro(this.furosAlma, this.diametroFuro, Constantes.ladoPeca.Alma, this.nome);
                UFSession.GetUFSession().Modl.Update();
                #endregion
            //}
            //else if(this.tipoApoio == Constantes.TipoPeca.Column)
            //{
            //    #region Coluna
            //    this.apoio_Angulo = this.angulo;
            //    this.apoio_AlturaAlma = this.Apoio.perfil.altura;
            //    this.apoio_EspessuraAlma = this.Apoio.perfil.espessura_Alma;
            //    this.apoio_EspessuraMesaInferior = this.Apoio.perfil.mesa_Inferior_Espessura;
            //    this.apoio_EspessuraMesaSuperior = this.Apoio.perfil.mesa_Superior_Espessura;
            //    this.apoio_LarguraMesaInferior = this.Apoio.perfil.mesa_Inferior_Largura;
            //    this.apoio_LarguraMesaSuperior = this.Apoio.perfil.mesa_Superior_Largura;
            //    this.apoio_AfastamentoVertical = Trigonometria.projectedDistance(this.origemGlobal, this.Apoio.startPoint_S, this.Apoio.vetorY);
            //    UFSession.GetUFSession().Modl.Update();
            //    interseccao();
            //    if(this.end == Constantes.end.end1)
            //    {
            //        this.viga.recorteInferiorEnd1Altura = this.viga.perfil.altura;
            //        this.viga.recorteInferiorEnd1ComprimentoA1 = this.xNeg;
            //        this.viga.recorteInferiorEnd1ComprimentoA2 = this.xPos;
            //        this.viga.recorteInferiorEnd1On = Constantes.OnOf.On;
            //    }
            //    if(this.end == Constantes.end.end2)
            //    {
            //        this.viga.recorteInferiorEnd2Altura = this.viga.perfil.altura;
            //        this.viga.recorteInferiorEnd2ComprimentoA1 = this.xPos;
            //        this.viga.recorteInferiorEnd2ComprimentoA2 = this.xNeg;
            //        this.viga.recorteInferiorEnd2On = Constantes.OnOf.On;
            //    }
            //    this.afastamentoZ = distZChapa;

            //    //para perfis caixao - alma
            //    if(alma && this.Apoio.tipoPerfil == Constantes.TipoPerfil.Caixao)
            //    {
            //        this.afastamentoZ = this.Apoio.P_Caixao_Dist / 2;
            //        this.extensaoChapa = 0;
            //    }
            //    UFSession.GetUFSession().Modl.Update();
            //    if(anguloViga != 0)
            //    {
            //        double recuo = Math.Abs(this.recuoViga * Math.Tan(Trigonometria.grausToRadiano(this.anguloViga)));

            //        double recorte = Math.Abs(this.viga.perfil.altura * Math.Tan(Trigonometria.grausToRadiano(this.anguloViga)));
                    
            //        if(this.end == Constantes.end.end1)
            //        {
            //            this.viga.recorteInferiorEnd1On = Constantes.OnOf.Off;
            //            this.viga.recorteSuperiorEnd1On = Constantes.OnOf.Off;
            //            double maior = Math.Max(this.viga.recorteInferiorEnd1ComprimentoA1, this.viga.recorteInferiorEnd1ComprimentoA2);
            //            if(this.inclinadaSuperior) this.viga.recuoEnd1 -= recorte;
            //            this.viga.recorteInclinadoEnd1 = Constantes.OnOf.On;
            //            this.viga.RecorteTIncEnd1CompInf = maior + (this.inclinadaSuperior ? 0 : recorte);
            //            this.viga.RecorteTIncEnd1CompSup = maior + (this.inclinadaSuperior ? recorte : 0);
            //        }
            //        else
            //        {
            //            this.viga.recorteInferiorEnd2On = Constantes.OnOf.Off;
            //            this.viga.recorteSuperiorEnd2On = Constantes.OnOf.Off;
            //            double maior = Math.Max(this.viga.recorteInferiorEnd2ComprimentoA1, this.viga.recorteInferiorEnd2ComprimentoA2);
            //            //this.viga.recuoEnd2 += maior;
            //            if(this.inclinadaSuperior) this.viga.recuoEnd2 -= recorte;
            //            //this.viga.recorteInclinadoEnd2 = Constantes.OnOf.On;
            //            this.viga.RecorteTIncEnd2CompInf = maior + (this.inclinadaSuperior ? 0 : recorte);
            //            this.viga.RecorteTIncEnd2CompSup = maior + (this.inclinadaSuperior ? recorte : 0);
            //        }
            //    }
            //    UFSession.GetUFSession().Modl.Update();
            //    this.viga.furacao.removerFuro(this.nome);
            //    this.viga.furacao.addFuro(this.furosAlma, this.diametroFuro, Constantes.ladoPeca.Alma, this.nome);
            //    UFSession.GetUFSession().Modl.Update();
            //    #endregion
            //}
        }

        public double locZPrimFuro
        {
            get
            {
                return Expressoes.LerValorExpressao("LocZPrimFuro", this.componente);
            }
        }

        public List<Ponto3D> furosAlma
        {
            get
            {
                List<Ponto3D> retorno = new List<Ponto3D>();
                if(this.end == Constantes.end.end1)
                {
                    double acumuladoY = -this.topoVigaPrimeiroFuro;
                    double acumuladoZ = this.locZPrimFuro;
                    for(int i = 0; i < this.numeroDeColunasPfs; i++)
                    {
                        for(int j = 0; j < this.numeroDeLinhasPfs; j++)
                        {
                            if(this.anguloViga == 0)
                            {
                                retorno.Add(new Ponto3D(0, acumuladoY, acumuladoZ + diferencaEndPoint));
                            }
                            else
                            {
                                System.Windows.Point pt = Trigonometria.rotacionar(new System.Windows.Point(0, 0), new System.Windows.Point(acumuladoZ, acumuladoY), this.anguloViga);
                                retorno.Add(new Ponto3D(0, pt.Y, pt.X));
                            }

                            acumuladoY -= this.centroEntreFuros;
                        }
                        acumuladoY = -this.topoVigaPrimeiroFuro;
                        acumuladoZ -= this.centroEntreFuros;
                    }
                }
                else if(this.end == Constantes.end.end2)
                {
                    double acumuladoY = -this.topoVigaPrimeiroFuro;
                    double dist = Trigonometria.calculaDistanciaEntrePontos3d(this.origemGlobal, this.viga.startPoint_S);
                    double acumuladoZ = dist - this.locZPrimFuro;
                    for(int i = 0; i < this.numeroDeColunasPfs; i++)
                    {
                        for(int j = 0; j < this.numeroDeLinhasPfs; j++)
                        {
                            if(this.anguloViga == 0)
                            {
                                retorno.Add(new Ponto3D(0, acumuladoY, acumuladoZ));
                            }
                            else
                            {
                                System.Windows.Point pt = Trigonometria.rotacionar(new System.Windows.Point(dist, 0), new System.Windows.Point(acumuladoZ, acumuladoY), this.anguloViga);
                                retorno.Add(new Ponto3D(0, pt.Y, pt.X));
                            }
                            acumuladoY -= this.centroEntreFuros;
                        }
                        acumuladoY = -this.topoVigaPrimeiroFuro;
                        acumuladoZ += this.centroEntreFuros;
                    }
                }
                return retorno;
            }
        }

    }
}
